///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Welcome to your first Cloud Script revision!
//
// Cloud Script runs in the PlayFab cloud and has full access to the PlayFab Game Server API 
// (https://api.playfab.com/Documentation/Server), and it runs in the context of a securely
// authenticated player, so you can use it to implement logic for your game that is safe from
// client-side exploits. 
//
// Cloud Script functions can also make web requests to external HTTP
// endpoints, such as a database or private API for your title, which makes them a flexible
// way to integrate with your existing backend systems.
//
// There are several different options for calling Cloud Script functions:
//
// 1) Your game client calls them directly using the "ExecuteCloudScript" API,
// passing in the function name and arguments in the request and receiving the 
// function return result in the response.
// (https://api.playfab.com/Documentation/Client/method/ExecuteCloudScript)
// 
// 2) You create PlayStream event actions that call them when a particular 
// event occurs, passing in the event and associated player profile data.
// (https://api.playfab.com/playstream/docs)
// 
// 3) For titles using the Photon Add-on (https://playfab.com/marketplace/photon/),
// Photon room events trigger webhooks which call corresponding Cloud Script functions.
// 
// The following examples demonstrate all three options.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

// This is a Cloud Script function. "args" is set to the value of the "FunctionParameter" 
// parameter of the ExecuteCloudScript API.
// (https://api.playfab.com/Documentation/Client/method/ExecuteCloudScript)
// "context" contains additional information when the Cloud Script function is called from a PlayStream action.
var HelloWorldDefault = function (args: any, context: IPlayFabContext): IHelloWorldResponse {

    // The pre-defined "currentPlayerId" variable is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
    var message = "Hello " + currentPlayerId + "!";

    // You can use the "log" object to write out debugging statements. It has
    // three functions corresponding to logging level: debug, info, and error. These functions
    // take a message string and an optional object.
    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });

    // The value you return from a Cloud Script function is passed back 
    // to the game client in the ExecuteCloudScript API response, along with any log statements
    // and additional diagnostic information, such as any errors returned by API calls or external HTTP
    // requests. They are also included in the optional player_executed_cloudscript PlayStream event 
    // generated by the function execution.
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    return { messageValue: message };
};

interface IHelloWorldResponse {
    messageValue: string;
}
handlers["helloWorld"] = HelloWorldDefault;

// This is a simple example of making a PlayFab server API call
var MakeApiCall = function (args: any, context: IPlayFabContext): void {
    var request: PlayFabServerModels.UpdatePlayerStatisticsRequest = {
        PlayFabId: currentPlayerId, Statistics: [{
            StatisticName: "Level",
            Value: 2
        }]
    };

    // The pre-defined "server" object has functions corresponding to each PlayFab server API 
    // (https://api.playfab.com/Documentation/Server). It is automatically 
    // authenticated as your title and handles all communication with 
    // the PlayFab API, so you don't have to write extra code to issue HTTP requests. 
    var playerStatResult = server.UpdatePlayerStatistics(request);
};
handlers["makeAPICall"] = MakeApiCall;

// This is a simple example of making a web request to an external HTTP API.
var MakeHttpRequest = function (args: any, context: IPlayFabContext): IMakeHttpRequestResponse {
    var headers: { [key: string]: string } = {
        "X-MyCustomHeader": "Some Value"
    };

    var body = {
        input: args,
        userId: currentPlayerId,
        mode: "foobar"
    };

    var url = "http://httpbin.org/status/200";
    var content = JSON.stringify(body);
    var httpMethod = "post";
    var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var response = http.request(url, httpMethod, content, contentType, headers);
    return { responseContent: response };
};

interface IMakeHttpRequestResponse {
    responseContent: string;
}
handlers["makeHTTPRequest"] = MakeHttpRequest;

// This is a simple example of a function that is called from a
// PlayStream event action. (https://playfab.com/introducing-playstream/)
var HandlePlayStreamEventAndProfile = function (args: any, context: IPlayFabContext): IHandlePlayStreamEventAndProfileResponse {

    // The event that triggered the action 
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels)
    var psEvent = context.playStreamEvent;

    // The profile data of the player associated with the event
    // (https://api.playfab.com/playstream/docs/PlayStreamProfileModels)
    var profile = context.playerProfile;

    // Post data about the event to an external API
    var content = JSON.stringify({ user: profile.PlayerId, event: psEvent.EventName });
    var response = http.request('https://httpbin.org/status/200', 'post', content, 'application/json', null);

    return { externalAPIResponse: response };
};

interface IHandlePlayStreamEventAndProfileResponse {
    externalAPIResponse: string;
}
handlers["handlePlayStreamEventAndProfile"] = HandlePlayStreamEventAndProfile;

// Below are some examples of using Cloud Script in slightly more realistic scenarios

// This is a function that the game client would call whenever a player completes
// a level. It updates a setting in the player's data that only game server
// code can write - it is read-only on the client - and it updates a player
// statistic that can be used for leaderboards. 
//
// A funtion like this could be extended to perform validation on the 
// level completion data to detect cheating. It could also do things like 
// award the player items from the game catalog based on their performance.
var CompletedLevel = function (args: any, context: IPlayFabContext): void {
    var level = args.levelName;
    var monstersKilled = args.monstersKilled;

    var updateUserDataResult = server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            lastLevelCompleted: level
        }
    });

    log.debug("Set lastLevelCompleted for player " + currentPlayerId + " to " + level);

    var request: PlayFabServerModels.UpdatePlayerStatisticsRequest = {
        PlayFabId: currentPlayerId, Statistics: [{
            StatisticName: "level_monster_kills",
            Value: monstersKilled
        }]
    };
    server.UpdatePlayerStatistics(request);

    log.debug("Updated level_monster_kills stat for player " + currentPlayerId + " to " + monstersKilled);
};
handlers["completedLevel"] = CompletedLevel;

// In addition to the Cloud Script handlers, you can define your own functions and call them from your handlers. 
// This makes it possible to share code between multiple handlers and to improve code organization.
var UpdatePlayerMove = function (args): IUpdatePlayerMoveResponse {
    var validMove = processPlayerMove(args);
    return { validMove: validMove };
};

interface IUpdatePlayerMoveResponse {
    validMove: boolean;
}
handlers["updatePlayerMove"] = UpdatePlayerMove;

// This is a helper function that verifies that the player's move wasn't made
// too quickly following their previous move, according to the rules of the game.
// If the move is valid, then it updates the player's statistics and profile data.
// This function is called from the "UpdatePlayerMove" handler above and also is 
// triggered by the "RoomEventRaised" Photon room event in the Webhook handler
// below. 
//
// For this example, the script defines the cooldown period (playerMoveCooldownInSeconds)
// as 15 seconds. A recommended approach for values like this would be to create them in Title
// Data, so that they can be queries in the script with a call to GetTitleData
// (https://api.playfab.com/Documentation/Server/method/GetTitleData). This would allow you to
// make adjustments to these values over time, without having to edit, test, and roll out an
// updated script.
function processPlayerMove(playerMove): boolean {
    var now = Date.now();
    var playerMoveCooldownInSeconds = 15;

    var playerData = server.GetUserInternalData({
        PlayFabId: currentPlayerId,
        Keys: ["last_move_timestamp"]
    });

    var lastMoveTimestampSetting = playerData.Data["last_move_timestamp"];

    if (lastMoveTimestampSetting) {
        var lastMoveTime = Date.parse(lastMoveTimestampSetting.Value);
        var timeSinceLastMoveInSeconds = (now - lastMoveTime) / 1000;
        log.debug("lastMoveTime: " + lastMoveTime + " now: " + now + " timeSinceLastMoveInSeconds: " + timeSinceLastMoveInSeconds);

        if (timeSinceLastMoveInSeconds < playerMoveCooldownInSeconds) {
            log.error("Invalid move - time since last move: " + timeSinceLastMoveInSeconds + "s less than minimum of " + playerMoveCooldownInSeconds + "s.");
            return false;
        }
    }

    var playerStats = server.GetPlayerStatistics({
        PlayFabId: currentPlayerId
    }).Statistics;

    var movesMade = 0;
    for (var i = 0; i < playerStats.length; i++)
        if (playerStats[i].StatisticName === "")
            movesMade = playerStats[i].Value;
    movesMade += 1;

    var request: PlayFabServerModels.UpdatePlayerStatisticsRequest = {
        PlayFabId: currentPlayerId, Statistics: [{
            StatisticName: "movesMade",
            Value: movesMade
        }]
    };
    server.UpdatePlayerStatistics(request);

    server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            last_move_timestamp: new Date(now).toUTCString(),
            last_move: JSON.stringify(playerMove)
        }
    });

    return true;
}

// This is an example of using PlayStream real-time segmentation to trigger
// game logic based on player behavior. (https://playfab.com/introducing-playstream/)
// The function is called when a player_statistic_changed PlayStream event causes a player 
// to enter a segment defined for high skill players. It sets a key value in
// the player's internal data which unlocks some new content for the player.
var UnlockHighSkillContent = function (args: any, context: IPlayFabContext): IUnlockHighSkillContentResponse {
    var playerStatUpdatedEvent = (context.playStreamEvent as PlayStreamModels.player_statistic_changed);

    var request: PlayFabServerModels.UpdateUserInternalDataRequest = {
        PlayFabId: currentPlayerId,
        Data: {
            "HighSkillContent": "true",
            "XPAtHighSkillUnlock": playerStatUpdatedEvent.StatisticValue.toString()
        }
    };
    var playerInternalData = server.UpdateUserInternalData(request);

    log.info('Unlocked HighSkillContent for ' + context.playerProfile.DisplayName);
    return { profile: context.playerProfile };
};

interface IUnlockHighSkillContentResponse {
    profile: IPlayFabPlayerProfile;
}
handlers["unlockHighSkillContent"] = UnlockHighSkillContent;

// Photon Webhooks Integration
//
// The following functions are examples of Photon Cloud Webhook handlers. 
// When you enable the Photon Add-on (https://playfab.com/marketplace/photon/)
// in the Game Manager, your Photon applications are automatically configured
// to authenticate players using their PlayFab accounts and to fire events that 
// trigger your Cloud Script Webhook handlers, if defined. 
// This makes it easier than ever to incorporate multiplayer server logic into your game.


interface IPhotonRealtimeWebHookResponse {
    ResultCode: number;
    Message?: string;
}

interface IPhotonRealtimePathCreateWebHookResponse extends IPhotonRealtimeWebHookResponse {
    State?: any;
}

// Triggered automatically when a Photon room is first created
var RoomCreated = function(args) : IPhotonRealtimePathCreateWebHookResponse {
    server.WritePlayerEvent({
        EventName : "room_created",
        PlayFabId: args.UserId,
        Body: {
            WebHook: {
                AppVersion: args.AppVersion,
                Region: args.Region,
                GameId: args.GameId,
                Type: args.Type,
                ActorNr: args.ActorNr,
                CreateOptions: args.CreateOptions
            }
        }
    });
    return { ResultCode: 0 };
};
handlers["RoomCreated"] = RoomCreated;

// Triggered automatically when a player joins a Photon room
var RoomJoined = function (args) : IPhotonRealtimeWebHookResponse {
    server.WritePlayerEvent({
        EventName: "room_joined",
        PlayFabId: args.UserId,
        Body: {
            WebHook: {
                AppVersion: args.AppVersion,
                Region: args.Region,
                GameId: args.GameId,
                ActorNr: args.ActorNr
            }
        }
    });
    return { ResultCode: 0 };
};
handlers["RoomJoined"] = RoomJoined;

// Triggered automatically when a player leaves a Photon room
var RoomLeft = function (args) : IPhotonRealtimeWebHookResponse {
    server.WritePlayerEvent({
        EventName: "room_left",
        PlayFabId: args.UserId,
        Body: {
            WebHook: {
                AppVersion: args.AppVersion,
                Region: args.Region,
                GameId: args.GameId,
                Type: args.Type,
                ActorNr: args.ActorNr,
                IsInactive: args.IsInactive
            }
        }
    });
    return { ResultCode: 0 };
};
handlers["RoomLeft"] = RoomLeft;

// Triggered automatically when a Photon room closes
// Note: currentPlayerId is undefined in this function
var RoomClosed = function (args) : IPhotonRealtimeWebHookResponse {
    server.WriteTitleEvent({
        EventName: "room_closed",
        Body: {
            WebHook: {
                AppVersion: args.AppVersion,
                Region: args.Region,
                GameId: args.GameId,
                Type: args.Type,
                ActorCount: args.ActorCount
            }
        }
    });
    return { ResultCode: 0 };
};
handlers["RoomClosed"] = RoomClosed;

// Triggered automatically when a Photon room game property is updated.
var RoomPropertyUpdated = function (args) : IPhotonRealtimeWebHookResponse {
    if (args.Type === "Game") {
        server.WritePlayerEvent({
            EventName: "room_properties_updated",
            PlayFabId: args.UserId,
            Body: {
                WebHook: {
                    AppVersion: args.AppVersion,
                    Region: args.Region,
                    GameId: args.GameId,
                    ActorNr: args.ActorNr,
                    Properties: args.Properties
                }
            }
        });
    } else { // "Actor"
        server.WritePlayerEvent({
            EventName: "player_roperties_updated",
            PlayFabId: args.UserId,
            Body: {
                WebHook: {
                    AppVersion: args.AppVersion,
                    Region: args.Region,
                    GameId: args.GameId,
                    ActorNr: args.ActorNr,
                    TargetActor: args.TargetActor,
                    Properties: args.Properties
                }
            }
        });
    }
    return { ResultCode: 0 };
};
handlers["RoomPropertyUpdated"] = RoomPropertyUpdated;

// Triggered by calling "OpRaiseEvent" on the Photon client. The "args.Data" property is 
// set to the value of the "customEventContent" HashTable parameter, so you can use
// it to pass in arbitrary data.
var RoomEventRaised = function (args) : IPhotonRealtimeWebHookResponse {
    server.WritePlayerEvent({
        EventName: "event_raised",
        PlayFabId: args.UserId,
        Body: {
            WebHook: {
                AppVersion: args.AppVersion,
                Region: args.Region,
                GameId: args.GameId,
                ActorNr: args.ActorNr,
                EvCode: args.EvCode
            }
        }
    });

    var eventData = args.Data;
    switch (eventData.eventType) { // use args.EvCode instead of embedding eventType in payload
        case "playerMove":
            processPlayerMove(eventData);
            break;

        default:
            break;
    }
    return { ResultCode: 0 };
};
handlers["RoomEventRaised"] = RoomEventRaised;